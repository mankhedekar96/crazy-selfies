{"version":3,"sources":["assets/circle.svg","assets/square.svg","assets/triangle.svg","assets/switch-camera.png","assets/back-arrow.png","config.js","components/Camera/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageFilters","name","value","srcImg","Circle","Square","Triangle","Camera","props","context","takePhoto","config","sizeFactor","setState","generatedImg","cameraPhoto","getDataUri","isPhotoCaptured","userImg","Image","src","filterImg","canvasRef","current","getContext","onload","drawImage","retake","CameraPhoto","videoRef","startCameraMaxResolution","state","facingMode","switchCamera","FACING_MODES","USER","ENVIRONMENT","React","createRef","this","idealFacingMode","idealResolution","startCamera","then","console","log","catch","error","stopCamera","closeCamera","className","ref","autoPlay","alt","style","display","onClick","SwitchIcon","BackIcon","Component","App","openFullscreen","elem","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","closeFullscreen","document","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","submitForm","onSelectChange","e","filter","find","el","target","imagePreview","selectedFilter","isCameraScreen","alert","goToMainScreen","documentElement","type","placeholder","defaultValue","onChange","disabled","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.266173e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circle.b0f2a497.svg\";","module.exports = __webpack_public_path__ + \"static/media/square.b7952dc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/triangle.01387784.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch-camera.9c45a307.png\";","module.exports = __webpack_public_path__ + \"static/media/back-arrow.16342357.png\";","import Circle from './assets/circle.svg';\nimport Square from './assets/square.svg';\nimport Triangle from './assets/triangle.svg';\n\nexport const ImageFilters = [\n    {\n        name: \"Circle\",\n        value: \"circle\",\n        srcImg: Circle\n    },\n    {\n        name: \"Square\",\n        value: \"square\",\n        srcImg: Square\n    },\n    {\n        name: \"Triangle\",\n        value: \"triangle\",\n        srcImg: Triangle\n    }\n]","import React, { Component } from 'react';\nimport './Camera.css';\nimport CameraPhoto, { FACING_MODES, IMAGE_TYPES } from 'jslib-html5-camera-photo';\nimport SwitchIcon from './../../assets/switch-camera.png';\nimport BackIcon from './../../assets/back-arrow.png'\n\nclass Camera extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.cameraPhoto = null;\n        this.videoRef = React.createRef();\n        this.canvasRef = React.createRef();\n        this.state = {\n            isPhotoCaptured: false,\n            generatedImg: '',\n            facingMode: FACING_MODES.USER\n        }\n    }\n\n    componentDidMount() {\n        this.cameraPhoto = new CameraPhoto(this.videoRef.current);\n        this.startCameraMaxResolution(this.state.facingMode);\n    }\n\n    async startCamera(idealFacingMode, idealResolution) {\n        await this.cameraPhoto.startCamera(idealFacingMode, idealResolution)\n            .then(() => {\n                console.log('camera is started !');\n            })\n            .catch((error) => {\n                console.error('Camera not started!', error);\n            });\n    }\n\n    async startCameraMaxResolution(idealFacingMode) {\n        await this.cameraPhoto.startCameraMaxResolution(idealFacingMode)\n            .then(() => {\n                console.log('camera is started !');\n            })\n            .catch((error) => {\n                console.error('Camera not started!', error);\n            });\n    }\n\n    takePhoto = () => {\n        const config = {\n            sizeFactor: 1\n        };\n\n        this.setState({ generatedImg: this.cameraPhoto.getDataUri(config), isPhotoCaptured: true });\n\n        let userImg = new Image();\n        userImg.src = this.cameraPhoto.getDataUri(config);\n        let filterImg = new Image();\n        filterImg.src = this.props.filterImg;\n\n        let context = this.canvasRef.current.getContext('2d');\n\n        userImg.onload = () => {\n            context.drawImage(userImg, 0, 0);\n\n            filterImg.onload = () => {\n                context.drawImage(filterImg, 0, 0);\n            }\n        }\n    }\n\n    retake = () => {\n        this.setState({ generatedImg: \"\", isPhotoCaptured: false });\n        this.cameraPhoto = new CameraPhoto(this.videoRef.current);\n        this.startCameraMaxResolution(this.state.facingMode);\n    }\n\n    async stopCamera() {\n        await this.cameraPhoto.stopCamera()\n            .then(() => {\n                console.log('Camera stoped!');\n            })\n            .catch((error) => {\n                console.log('No camera to stop!:', error);\n            });\n    }\n\n    switchCamera = () => {\n        if (this.state.facingMode === FACING_MODES.USER) {\n            this.setState({ facingMode: FACING_MODES.ENVIRONMENT });\n            this.startCameraMaxResolution(this.state.facingMode);\n        } else {\n            this.setState({ facingMode: FACING_MODES.USER });\n            this.startCameraMaxResolution(this.state.facingMode);\n        }\n    }\n\n    render() {\n        const { closeCamera, filterImg } = this.props;\n        const { generatedImg, isPhotoCaptured } = this.state;\n        return (\n            <div>\n                <div className=\"camera-container\">\n                    <div>\n\n                        <video\n                            ref={this.videoRef} autoPlay={true}></video>\n                        {isPhotoCaptured && <>\n                            <img src={generatedImg} alt=\"Generated Selfie\" />\n                        </>}\n                        <img src={filterImg} alt=\"Filter Overlay\" />\n\n                        <canvas style={{ display: \"none\" }} ref={this.canvasRef}></canvas>\n\n                    </div>\n                    <div className=\"capture-controls\">\n                        {!isPhotoCaptured &&\n                            <div>\n                                <div className=\"capture-btn-container\">\n                                    <button className=\"capture-btn\" onClick={this.takePhoto}></button>\n                                </div>\n\n                                <img src={SwitchIcon} className=\"switch-camera-btn\" onClick={this.switchCamera} />\n                                {!isPhotoCaptured && \n                                <img src={BackIcon} className=\"go-back-btn\" onClick={() => {\n                                    this.stopCamera();\n                                    closeCamera();\n                                }} />}\n                            </div>}\n                        {isPhotoCaptured &&\n                            <div className=\"retake-btn-container\">\n                                <button className=\"retake-btn\" onClick={this.retake} >Take Another</button>\n                                <button className=\"retake-btn\" onClick={this.takePhoto} >Save Picture</button>\n                            </div>}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Camera;","import React, { Component } from 'react';\nimport './App.css';\n\nimport { ImageFilters } from './config';\nimport Camera from './components/Camera';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imagePreview: null,\n      selectedFilter: null,\n      isCameraScreen: false\n    };\n  }\n\n  componentDidMount() {\n    this.elem = document.documentElement;\n  }\n\n  openFullscreen = () => {\n    if (this.elem.requestFullscreen) {\n      this.elem.requestFullscreen();\n    } else if (this.elem.mozRequestFullScreen) { /* Firefox */\n      this.elem.mozRequestFullScreen();\n    } else if (this.elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n      this.elem.webkitRequestFullscreen();\n    } else if (this.elem.msRequestFullscreen) { /* IE/Edge */\n      this.elem.msRequestFullscreen();\n    }\n  }\n\n  /* Close fullscreen */\n  closeFullscreen = () => {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) { /* Firefox */\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) { /* IE/Edge */\n      document.msExitFullscreen();\n    }\n  }\n\n  submitForm = () => {\n\n  }\n\n  onSelectChange = (e) => {\n    let filter = ImageFilters.find(el => el.value === e.target.value);\n    this.setState({ imagePreview: filter.srcImg, selectedFilter: filter.srcImg });\n  }\n\n  takePhoto = () => {\n    if(this.state.selectedFilter){\n      this.openFullscreen();\n      this.setState({ isCameraScreen : true });\n    } else {\n      alert(\"Please select filter!\");\n    }\n  }\n\n  goToMainScreen = () => {\n    this.closeFullscreen();\n    this.setState({ isCameraScreen : false });\n  }\n\n  render() {\n    const { imagePreview, isCameraScreen, selectedFilter } = this.state;\n    return (\n      <div className=\"App\">\n        {!isCameraScreen &&\n          (<div className=\"main-screen\">\n            <header>\n              <h1>Crazy Selfies</h1>\n            </header>\n            <section>\n              <form>\n                <input type=\"text\" name=\"Name\" placeholder=\"Enter your name\" />\n\n                <select name=\"filters\" defaultValue=\"default\" onChange={this.onSelectChange}>\n                  <option disabled value=\"default\"> -- Select a filter -- </option>\n                  {ImageFilters.map(filter => (<option key={\"option-\" + filter.value} value={filter.value}>{filter.name}</option>))}\n                </select>\n\n                <input type=\"button\" value=\"Take Photo\" name=\"takephoto\" onClick={this.takePhoto} />\n\n                {imagePreview && <img src={imagePreview} alt=\"Selfie Preview\" className=\"preview\" />}\n\n                <input type=\"submit\" value=\"Submit\" onClick={this.submitForm} />\n\n              </form>\n            </section>\n          </div>)}\n        {isCameraScreen &&\n          <Camera\n            filterImg={selectedFilter}\n            closeCamera={this.goToMainScreen}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}