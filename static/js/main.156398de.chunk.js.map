{"version":3,"sources":["assets/images/circle.svg","assets/images/square.svg","assets/images/triangle.svg","assets/images/iron-man.png","assets/images/switch-camera.png","assets/images/back-arrow.png","assets/sound/camera-shutter.mp3","config.js","components/Camera/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageFilters","name","value","srcImg","Circle","Square","Triangle","IronMan","Camera","props","context","resetState","setState","isPhotoCaptured","generatedImg","facingMode","FACING_MODES","USER","isLoading","takePhoto","shutterSoundRef","current","play","config","sizeFactor","imageType","IMAGE_TYPES","JPG","imageCompression","isImageMirror","state","mirrorOffset","cameraPhoto","getDataUri","stopCamera","retake","startCameraMaxResolution","switchCamera","ENVIRONMENT","videoRef","React","createRef","this","_isMounted","CameraPhoto","idealFacingMode","idealResolution","startCamera","then","console","log","catch","error","closeCamera","filterImg","savePhoto","className","preload","ref","src","ShutterSound","autoPlay","style","transform","alt","onClick","SwitchIcon","BackIcon","Component","App","openFullscreen","elem","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","closeFullscreen","document","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","submitForm","onSelectChange","e","filter","find","el","target","imagePreview","selectedFilter","isCameraScreen","alert","goToMainScreen","loadImages","sources","callback","images","loadedImages","numImages","length","i","createElement","onload","imageElem","resultImgRef","canvasContext","drawImage","window","innerWidth","screen","width","innerHeight","height","canvas","toDataURL","cameraImg","canvasRef","documentElement","getContext","type","placeholder","defaultValue","onChange","disabled","map","key","display","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.156398de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circle.b0f2a497.svg\";","module.exports = __webpack_public_path__ + \"static/media/square.b7952dc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/triangle.01387784.svg\";","module.exports = __webpack_public_path__ + \"static/media/iron-man.6c091d9c.png\";","module.exports = __webpack_public_path__ + \"static/media/switch-camera.9c45a307.png\";","module.exports = __webpack_public_path__ + \"static/media/back-arrow.16342357.png\";","module.exports = __webpack_public_path__ + \"static/media/camera-shutter.d5fb3f65.mp3\";","import Circle from './assets/images/circle.svg';\nimport Square from './assets/images/square.svg';\nimport Triangle from './assets/images/triangle.svg';\nimport IronMan from './assets/images/iron-man.png';\n\nexport const ImageFilters = [\n    {\n        name: \"Circle\",\n        value: \"circle\",\n        srcImg: Circle\n    },\n    {\n        name: \"Square\",\n        value: \"square\",\n        srcImg: Square\n    },\n    {\n        name: \"Triangle\",\n        value: \"triangle\",\n        srcImg: Triangle\n    },\n    {\n        name: \"Iron Man\",\n        value: \"iron-man\",\n        srcImg: IronMan\n    }\n]","import React, { Component } from 'react';\nimport './Camera.css';\nimport CameraPhoto, { FACING_MODES, IMAGE_TYPES } from 'jslib-html5-camera-photo';\nimport SwitchIcon from './../../assets/images/switch-camera.png';\nimport BackIcon from './../../assets/images/back-arrow.png';\nimport ShutterSound from './../../assets/sound/camera-shutter.mp3';\n\nclass Camera extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.cameraPhoto = null;\n        this.videoRef = React.createRef();\n        this.shutterSoundRef = React.createRef();\n        this.state = {\n            isPhotoCaptured: false,\n            generatedImg: '',\n            facingMode: FACING_MODES.USER,\n            isLoading: false,\n            mirrorOffset: true\n        }\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        this.cameraPhoto = new CameraPhoto(this.videoRef.current);\n        this.startCameraMaxResolution(this.state.facingMode);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        this.cameraPhoto = null;\n        this.resetState();\n    }\n\n    resetState = () => {\n        this.setState({\n            isPhotoCaptured: false,\n            generatedImg: '',\n            facingMode: FACING_MODES.USER,\n            isLoading: false\n        });\n    }\n\n    startCamera(idealFacingMode, idealResolution) {\n        this.setState({ isLoading: true });\n        this.cameraPhoto.startCamera(idealFacingMode, idealResolution)\n            .then(() => {\n                console.log('camera is started !');\n                if (this._isMounted) {\n                    this.setState({ isLoading: false });\n                }\n            })\n            .catch((error) => {\n                console.error('Camera not started!', error);\n            });\n    }\n\n    startCameraMaxResolution(idealFacingMode) {\n        this.setState({ isLoading: true });\n        this.cameraPhoto.startCameraMaxResolution(idealFacingMode)\n            .then(() => {\n                console.log('camera is started !');\n                if (this._isMounted) {\n                    this.setState({ isLoading: false });\n                }\n            })\n            .catch((error) => {\n                console.error('Camera not started!', error);\n            });\n    }\n\n    takePhoto = () => {\n        this.setState({ isLoading: true });\n\n        this.shutterSoundRef.current.play();\n        \n        const config = {\n            sizeFactor: 1,\n            imageType: IMAGE_TYPES.JPG,\n            imageCompression: .95,\n            isImageMirror: this.state.mirrorOffset\n        };\n\n        this.setState({ generatedImg: this.cameraPhoto.getDataUri(config), isPhotoCaptured: true });\n\n        this.stopCamera();\n    }\n\n    retake = () => {\n        this.setState({ generatedImg: \"\", isPhotoCaptured: false });\n        this.startCameraMaxResolution(this.state.facingMode);\n    }\n\n    stopCamera() {\n        this.setState({ isLoading: true });\n        this.cameraPhoto.stopCamera()\n            .then(() => {\n                console.log('Camera stopped!');\n                if (this._isMounted) {\n                    this.setState({ isLoading: false });\n                }\n            })\n            .catch((error) => {\n                console.log('No camera to stop!:', error);\n            });\n    }\n\n    switchCamera = () => {\n        this.setState({ isLoading: true });\n\n        if (this.state.facingMode == FACING_MODES.USER) {\n            this.setState({ facingMode: FACING_MODES.ENVIRONMENT, mirrorOffset: true });\n            this.startCameraMaxResolution(this.state.facingMode);\n        } else {\n            this.setState({ facingMode: FACING_MODES.USER, mirrorOffset: false });\n            this.startCameraMaxResolution(this.state.facingMode);\n        }\n\n        this.setState({ isLoading: false });\n    }\n\n    render() {\n        const { closeCamera, filterImg, savePhoto } = this.props;\n        const { generatedImg, isPhotoCaptured, isLoading, mirrorOffset } = this.state;\n        return (\n            <div>\n                <audio className=\"sound-skid\" preload=\"auto\" ref={this.shutterSoundRef}>\n                    <source src={ShutterSound}></source>\n                </audio>\n                <div className=\"camera-container\">\n                    <div>\n                        <video\n                            ref={this.videoRef}\n                            autoPlay={true}\n                            style={{ transform: mirrorOffset ? \"rotateY(180deg)\" : \"rotateY(0deg)\" }}></video>\n                        {isPhotoCaptured && <>\n                            <img src={generatedImg} alt=\"Generated Selfie\" />\n                        </>}\n                        <img src={filterImg} alt=\"Filter Overlay\" />\n                    </div>\n                    <div className=\"capture-controls\">\n                        {!isPhotoCaptured &&\n                            <div>\n                                <div className=\"capture-btn-container\">\n                                    <button className=\"capture-btn\" onClick={this.takePhoto}></button>\n                                </div>\n\n                                <img src={SwitchIcon} className=\"switch-camera-btn\" alt=\"Switch Icon\" onClick={this.switchCamera} />\n                                {!isPhotoCaptured &&\n                                    <img src={BackIcon} className=\"go-back-btn\" alt=\"Back Icon\" onClick={() => {\n                                        this.stopCamera();\n                                        closeCamera();\n                                    }} />}\n                            </div>}\n                        {isPhotoCaptured &&\n                            <div className=\"retake-btn-container\">\n                                <button className=\"retake-btn\" onClick={this.retake} >Take Another</button>\n                                <button className=\"retake-btn\" onClick={() => {\n                                    savePhoto(generatedImg);\n                                }} >Save Picture</button>\n                            </div>}\n                    </div>\n                    {isLoading && <div className=\"loader\"></div>}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Camera;","import React, { Component } from 'react';\nimport './App.css';\n\nimport { ImageFilters } from './config';\nimport Camera from './components/Camera';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.resultImgRef = React.createRef();\n    this.state = {\n      imagePreview: null,\n      cameraImg: null,\n      selectedFilter: null,\n      isCameraScreen: false\n    };\n  }\n\n  componentDidMount() {\n    this.elem = document.documentElement;\n    const canvas = this.canvasRef.current;\n    this.canvasContext = canvas.getContext('2d');\n  }\n\n  openFullscreen = () => {\n    if (this.elem.requestFullscreen) {\n      this.elem.requestFullscreen();\n    } else if (this.elem.mozRequestFullScreen) { /* Firefox */\n      this.elem.mozRequestFullScreen();\n    } else if (this.elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n      this.elem.webkitRequestFullscreen();\n    } else if (this.elem.msRequestFullscreen) { /* IE/Edge */\n      this.elem.msRequestFullscreen();\n    }\n  }\n\n  /* Close fullscreen */\n  closeFullscreen = () => {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) { /* Firefox */\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) { /* IE/Edge */\n      document.msExitFullscreen();\n    }\n  }\n\n  submitForm = () => {\n\n  }\n\n  onSelectChange = (e) => {\n    let filter = ImageFilters.find(el => el.value === e.target.value);\n    this.setState({ imagePreview: filter.srcImg, selectedFilter: filter.srcImg });\n  }\n\n  takePhoto = () => {\n    if (this.state.selectedFilter) {\n      this.openFullscreen();\n      this.setState({ isCameraScreen: true });\n    } else {\n      alert(\"Please select filter!\");\n    }\n  }\n\n  goToMainScreen = () => {\n    this.setState({ isCameraScreen: false });\n    this.closeFullscreen();\n  }\n\n  loadImages = (sources, callback) => {\n\n    let images = [];\n    let loadedImages = 0;\n    let numImages = sources.length;\n\n    for (let i = 0; i < sources.length; i++) {\n      images[i] = document.createElement('img');\n      images[i].onload = function () {\n        console.log(\"We are in!!!\", sources);\n        if (++loadedImages >= numImages) {\n          callback(images);\n        }\n      };\n      images[i].src = sources[i];\n    }\n  }\n\n  savePhoto = (generatedImg) => {\n    this.goToMainScreen();\n\n    let sources = [generatedImg, this.state.selectedFilter];\n\n    this.loadImages(sources,(images) => {\n\n      let imageElem = this.resultImgRef.current;\n\n      for (let i = 0; i < sources.length; i++) {\n        this.canvasContext.drawImage(images[i], 0, 0, \n          (window.innerWidth ? window.innerWidth : window.screen.width), \n          (window.innerHeight ? window.innerHeight - 100 : window.screen.height - 100));\n      }\n\n      imageElem.src = this.canvasContext.canvas.toDataURL('image/png');\n      this.setState({cameraImg : this.canvasContext.canvas.toDataURL('image/png')})\n    });\n  }\n\n  render() {\n    const { imagePreview, isCameraScreen, selectedFilter } = this.state;\n    return (\n      <div className=\"App\">\n        {!isCameraScreen &&\n          (<div className=\"main-screen\">\n            <header>\n              <h1>Crazy Selfies</h1>\n            </header>\n            <section>\n              <form>\n                <input type=\"text\" name=\"Name\" placeholder=\"Enter your name\" />\n\n                <select name=\"filters\" defaultValue=\"default\" onChange={this.onSelectChange}>\n                  <option disabled value=\"default\"> -- Select a filter -- </option>\n                  {ImageFilters.map(filter => (<option key={\"option-\" + filter.value} value={filter.value}>{filter.name}</option>))}\n                </select>\n\n                <input type=\"button\" value=\"Take Photo\" name=\"takephoto\" onClick={this.takePhoto} />\n\n                {imagePreview && <img src={imagePreview} ref={this.resultImgRef} alt=\"Selfie Preview\" className=\"preview\" />}\n\n                <canvas\n                style={{display : \"none\"}} \n                width={window.innerWidth ? window.innerWidth : window.screen.width}\n                height={window.innerHeight ? window.innerHeight : window.screen.height}\n                ref={this.canvasRef} ></canvas>\n\n                <input type=\"submit\" value=\"Submit\" onClick={this.submitForm} />\n\n              </form>\n            </section>\n          </div>)}\n        {isCameraScreen &&\n          <Camera\n            filterImg={selectedFilter}\n            closeCamera={this.goToMainScreen}\n            savePhoto={this.savePhoto}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}